name: Testitem CI workflow

on:
  workflow_call:
    inputs:
      include-release-versions:
        type: boolean
        required: false
        default: true
      include-lts-versions:
        type: boolean
        required: false
        default: true
      include-all-compatible-minor-versions:
        type: boolean
        required: false
        default: false
      include-smallest-compatible-minor-versions:
        type: boolean
        required: false
        default: true
      include-rc-versions:
        type: boolean
        required: false
        default: false
      include-beta-versions:
        type: boolean
        required: false
        default: false
      include-alpha-versions:
        type: boolean
        required: false
        default: false
      include-nightly-versions:
        type: boolean
        required: false
        default: false
      include-windows-x64:
        type: boolean
        required: false
        default: true
      include-windows-x86:
        type: boolean
        required: false
        default: true
      include-linux-x64:
        type: boolean
        required: false
        default: true
      include-linux-x86:
        type: boolean
        required: false
        default: true
      include-macos-x64:
        type: boolean
        required: false
        default: true
      include-macos-aarch64:
        type: boolean
        required: false
        default: true
      env:
        type: string
        required: false
        default: ""
      github_job_prep_script:
        type: string
        required: false
        default: ""
    secrets:
      codecov_token:
        required: true

permissions: write-all

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.actor }}-${{ github.event_name }}
  cancel-in-progress: true

jobs:
  lint:
    if: ${{ (github.event_name == 'push' || github.event_name == 'pull_request') || (github.event_name == 'workflow_dispatch' && github.event.inputs.feature == 'LintAndTest') }}
    runs-on: ubuntu-latest
    outputs:
      lint-results: ${{ steps.lint-step.outputs.lint-results }}
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/julia-lint@main
        id: lint-step

  compute-test-matrix:
    if: ${{ (github.event_name == 'push' || github.event_name == 'pull_request') || (github.event_name == 'workflow_dispatch' && github.event.inputs.feature == 'LintAndTest') }}
    runs-on: ubuntu-latest
    outputs:
      test-matrix: ${{ steps.compute-test-matrix.outputs.test-matrix }}
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/julia-compute-test-matrix@main
        id: compute-test-matrix
        with:
          include-release-versions: ${{ inputs.include-release-versions }}
          include-lts-versions: ${{ inputs.include-lts-versions }}
          include-all-compatible-minor-versions: ${{ inputs.include-all-compatible-minor-versions }}
          include-smallest-compatible-minor-versions: ${{ inputs.include-smallest-compatible-minor-versions }}
          include-rc-versions: ${{ inputs.include-rc-versions }}
          include-beta-versions: ${{ inputs.include-beta-versions }}
          include-alpha-versions: ${{ inputs.include-alpha-versions }}
          include-nightly-versions: ${{ inputs.include-nightly-versions }}
          include-windows-x64: ${{ inputs.include-windows-x64 }}
          include-windows-x86: ${{ inputs.include-windows-x86 }}
          include-linux-x64: ${{ inputs.include-linux-x64 }}
          include-linux-x86: ${{ inputs.include-linux-x86 }}
          include-macos-x64: ${{ inputs.include-macos-x64 }}
          include-macos-aarch64: ${{ inputs.include-macos-aarch64 }}

  run-tests:
    if: ${{ (github.event_name == 'push' || github.event_name == 'pull_request') || (github.event_name == 'workflow_dispatch' && github.event.inputs.feature == 'LintAndTest') }}
    needs: compute-test-matrix
    strategy:
        fail-fast: false
        matrix:
          include: ${{ fromJson(needs.compute-test-matrix.outputs.test-matrix) }}
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - uses: julia-actions/install-juliaup@v2
      with:
        channel:  ${{ matrix.juliaup-channel }}
    - uses: julia-actions/julia-buildpkg@v1
    - name: Run worker prep script
      if: ${{ inputs.github_job_prep_script != '' }}
      run: julia ${{ inputs.github_job_prep_script }}
      shell: bash
    - name: Run tests
      uses: julia-actions/julia-run-testitems@main
      with:
        juliaup-channel: ${{ matrix.juliaup-channel }}
        results-path: ${{ format('testitemresults-{0}-{1}.json', matrix.os, matrix.juliaup-channel) }}
        env: ${{ inputs.env }}
    - uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        name: ${{ format('testitemresults-{0}-{1}', matrix.os, matrix.juliaup-channel) }}
        path: ${{ format('testitemresults-{0}-{1}.json', matrix.os, matrix.juliaup-channel) }}
        retention-days: 1
    - uses: julia-actions/julia-processcoverage@v1
      if: ${{ !cancelled() }}
    - uses: codecov/codecov-action@v4
      if: ${{ !cancelled() }}
      with:
        files: ./lcov.info
        flags: unittests
        token: ${{ secrets.codecov_token }}

  report-results:
    needs: [run-tests, lint]
    if: ${{ always() && (github.event_name == 'push' || github.event_name == 'pull_request') || (github.event_name == 'workflow_dispatch' && github.event.inputs.feature == 'LintAndTest') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: testitemresults-*
          path: testresults
          merge-multiple: true
      - uses: julia-actions/julia-report-ci-results@main
        with:
          results-path: testresults
          lint-results: ${{ needs.lint.outputs.lint-results }}

  deploy-docs:
    if: ${{ (github.event_name == 'push' || github.event_name == 'pull_request') || (github.event_name == 'workflow_dispatch' && github.event.inputs.feature == 'DocDeploy') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/cache@v2
      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-docdeploy@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  tagbot:
    if: ${{ (github.event_name == 'issue_comment' && github.actor == 'JuliaTagBot') || (github.event_name == 'workflow_dispatch' && github.event.inputs.feature == 'TagBot') }}
    runs-on: ubuntu-latest
    steps:
      - run: Write-Host $ENV:GITHUB_REPOSITORY
      - uses: JuliaRegistries/TagBot@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branches: true

  compat-helper:
    if: ${{ github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.feature == 'CompatHelper') }}
    runs-on: ubuntu-latest
    steps:
      - name: Check if Julia is already available in the PATH
        id: julia_in_path
        run: which julia
        continue-on-error: true
      - name: Install Julia, but only if it is not already available in the PATH
        uses: julia-actions/setup-julia@v1
        with:
          version: '1'
          arch: ${{ runner.arch }}
        if: steps.julia_in_path.outcome != 'success'
      - name: "Add the General registry via Git"
        run: |
          import Pkg
          ENV["JULIA_PKG_SERVER"] = ""
          Pkg.Registry.add("General")
        shell: julia --color=yes {0}
      - name: "Install CompatHelper"
        run: |
          import Pkg
          name = "CompatHelper"
          uuid = "aa819f21-2bde-4658-8897-bab36330d9b7"
          version = "3"
          Pkg.add(; name, uuid, version)
        shell: julia --color=yes {0}
      - name: "Run CompatHelper"
        run: |
          import CompatHelper
          CompatHelper.main()
        shell: julia --color=yes {0}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COMPATHELPER_PRIV: ${{ secrets.DOCUMENTER_KEY }}
          # COMPATHELPER_PRIV: ${{ secrets.COMPATHELPER_PRIV }}          